angular.module("admin", ["functions"]).controller("adminCtrl", ["$scope", "$http", "functions", function (o, e, t) { e.get("../config/config.json").then(function (e) { o.config = e.data, "undefined" != typeof Storage && (localStorage.version ? localStorage.version !== o.config.version && (localStorage.version = o.config.version, window.location.reload(!0)) : localStorage.version = o.config.version) }), o.toggleTpl = (e=> { o.tpl = e }), o.toggleTpl("login"); var r = () => { o.islogin = !1, o.u = [], sessionStorage.clear(), t.post("Users", "Init", {}).then(e=> { o.u = e }) }; r(); t.post("ProductGroups", "GetProductGroups", {}).then(e=> { o.pg = e }); var s = e=> { t.post("Products", "GetAllProductsByUserId", { userId: e }).then(e=> { o.p = e }) }, n = (o, e) => { t.post("Products", "LoadProductGallery", { productId: o.productId }).then(e=> { o.gallery = e }) }; o.f = { login: e=>(e=> { sessionStorage.clear(), t.post("Users", "Login", { userName: e.userName, password: e.password }).then(t=> { t.userName === e.userName ? (o.u = t, sessionStorage.setItem("username", o.u.userName), o.islogin = !0, s(o.u.userId), o.toggleTpl("product")) : alert("Error Login!") }) })(e), logout: () =>r(), signup: (e, r) =>((e, r) =>e.password !== o.passwordConfirm ? (alert("Password do not match."), !1) : r ? void t.post("Users", "Signup", { user: e }).then(o=> { alert(o) }) : (alert("confirm terms of service"), !1))(e, r), getProducts: o=>s(o), save: (o, e) =>((o, e) => { t.post("Products", "SaveProduct", { product: o, user: e }).then(e=> { o.productId = e.productId }) })(o, e), upload: (o, t) =>((o, t) => { var r = new FormData(document.getElementById("formUpload_" + o.productId)); e({ url: "../UploadHandler.ashx", method: "POST", headers: { "Content-Type": void 0 }, data: r }).then(function (e) { n(o, t) }, function (o) { alert(o.data.d) }) })(o, t), deleteImg: (o, e) =>((o, e) => { t.post("Products", "DeleteImg", { productId: o.productId, img: e }).then(e=> { o.gallery = e }) })(o, e), newProduct: () => { t.post("Products", "Init", {}).then(e=> { o.p.push(e) }) }, deleteProduct: (o, e) =>((o, e) => { t.post("Products", "Delete", { productId: o.productId }).then(o=> { s(e.userId) }) })(o, e) } }]);